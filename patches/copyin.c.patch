diff --git a/src/copyin.c b/src/copyin.c
index ace0a02..01f29f5 100644
--- a/src/copyin.c
+++ b/src/copyin.c
@@ -48,7 +48,6 @@ warn_junk_bytes (long bytes_skipped)
 	 bytes_skipped);
 }
 
-
 static int
 query_rename(struct cpio_file_stat* file_hdr, FILE *tty_in, FILE *tty_out,
 	     FILE *rename_in)
@@ -387,7 +386,7 @@ create_final_defers (void)
 
     }
 }
-
+
 static void
 copyin_regular_file (struct cpio_file_stat* file_hdr, int in_file_des)
 {
@@ -796,10 +795,10 @@ copyin_link (struct cpio_file_stat *file_hdr, int in_file_des)
       res = UMASKED_SYMLINK (link_name, file_hdr->c_name,
 			     file_hdr->c_mode);
       if (res < 0 && create_dir_flag)
-	{
-	  create_all_directories (file_hdr->c_name);
-	  res = UMASKED_SYMLINK (link_name, file_hdr->c_name, file_hdr->c_mode);
-	}
+      {
+	 create_all_directories (file_hdr->c_name);
+	 res = UMASKED_SYMLINK (link_name, file_hdr->c_name, file_hdr->c_mode);
+      }
       if (res < 0)
 	symlink_error (link_name, file_hdr->c_name);
       else if (!no_chown_flag)
@@ -816,7 +815,7 @@ copyin_link (struct cpio_file_stat *file_hdr, int in_file_des)
     }
   free (link_name);
 }
-
+
 static void
 copyin_file (struct cpio_file_stat *file_hdr, int in_file_des)
 {
@@ -860,7 +859,7 @@ copyin_file (struct cpio_file_stat *file_hdr, int in_file_des)
       tape_skip_padding (in_file_des, file_hdr->c_filesize);
     }
 }
-
+
 
 /* Current time for verbose table.  */
 static struct timespec current_time;
@@ -1053,7 +1052,6 @@ read_in_header (struct cpio_file_stat *file_hdr, int in_des)
   long bytes_skipped = 0;	/* Bytes of junk found before magic number.  */
 
   /* Search for a valid magic number.  */
-
   if (archive_format == arf_unknown)
     {
       union
@@ -1067,6 +1065,7 @@ read_in_header (struct cpio_file_stat *file_hdr, int in_des)
       while (archive_format == arf_unknown)
 	{
 	  peeked_bytes = tape_buffered_peek (tmpbuf.s, in_des, 512);
+
 	  if (peeked_bytes < 6)
 	    error (PAXEXIT_FAILURE, 0, _("premature end of archive"));
 
@@ -1118,6 +1117,15 @@ read_in_header (struct cpio_file_stat *file_hdr, int in_des)
       if (append_flag)
 	last_header_start = input_bytes - io_block_size
 	  + (in_buff - input_buffer) - 6;
+
+#ifdef __MVS__
+	/* --- AUTO-DETECT FORMAT IF UNKNOWN --- */
+      if (archive_format == arf_unknown) {
+         char peek_magic[7];
+         memcpy(peek_magic, magic.str, 6); 
+         peek_magic[6] = '\0';
+      }
+#endif
       if (archive_format == arf_newascii
 	  && !strncmp (magic.str, "070701", 6))
 	{
@@ -1165,6 +1173,7 @@ read_in_header (struct cpio_file_stat *file_hdr, int in_des)
 static void
 read_name_from_file (struct cpio_file_stat *file_hdr, int fd, uintmax_t len)
 {
+
   if (len == 0)
     {
       error (0, 0, _("malformed header: file name of zero length"));
@@ -1179,6 +1188,13 @@ read_name_from_file (struct cpio_file_stat *file_hdr, int fd, uintmax_t len)
 	  /* Skip this file */
 	  len = 0;
 	}
+#ifdef __MVS__
+      else
+      {
+	 // Ensure all directories exist
+	 create_all_directories(file_hdr->c_name);
+      }
+#endif
     }
   file_hdr->c_namesize = len;
 }
@@ -1192,7 +1208,6 @@ read_in_old_ascii (struct cpio_file_stat *file_hdr, int in_des)
 {
   struct old_ascii_header ascii_header;
   unsigned long dev;
-
   tape_buffered_read (ascii_header.c_dev, in_des,
 		      sizeof ascii_header - sizeof ascii_header.c_magic);
   dev = FROM_OCTAL (ascii_header.c_dev);
@@ -1200,7 +1215,24 @@ read_in_old_ascii (struct cpio_file_stat *file_hdr, int in_des)
   file_hdr->c_dev_min = minor (dev);
 
   file_hdr->c_ino = FROM_OCTAL (ascii_header.c_ino);
+#ifdef __MVS__
+  unsigned int raw_mode = FROM_OCTAL(ascii_header.c_mode);
+
+  /* 
+   *    Separate type bits and permission bits:
+   *       - type bits: S_IFMT (file type mask)
+   *          - permission bits: lower 12 bits (07777)
+   *          */
+  unsigned int file_type = raw_mode & S_IFMT;       // file type
+  unsigned int perms     = raw_mode & 07777;       // permissions
+
+   if (file_type == 0)
+	file_type = S_IFREG;
+  file_hdr->c_mode = file_type | perms;
+#else
   file_hdr->c_mode = FROM_OCTAL (ascii_header.c_mode);
+#endif
+
   file_hdr->c_uid = FROM_OCTAL (ascii_header.c_uid);
   file_hdr->c_gid = FROM_OCTAL (ascii_header.c_gid);
   file_hdr->c_nlink = FROM_OCTAL (ascii_header.c_nlink);
@@ -1211,7 +1243,7 @@ read_in_old_ascii (struct cpio_file_stat *file_hdr, int in_des)
   file_hdr->c_mtime = FROM_OCTAL (ascii_header.c_mtime);
   file_hdr->c_filesize = FROM_OCTAL (ascii_header.c_filesize);
   read_name_from_file (file_hdr, in_des, FROM_OCTAL (ascii_header.c_namesize));
-
+								     //
   /* HP/UX cpio creates archives that look just like ordinary archives,
      but for devices it sets major = 0, minor = 1, and puts the
      actual major/minor number in the filesize field.  See if this
@@ -1240,6 +1272,12 @@ read_in_old_ascii (struct cpio_file_stat *file_hdr, int in_des)
       default:
 	break;
     }
+#ifdef __MVS__
+   /* --- TRAILER!!! check --- */
+      if (strcmp(file_hdr->c_name, "TRAILER!!!") == 0) {
+         return;                  // stop processing further
+     }
+#endif
 }
 
 /* Fill in FILE_HDR by reading a new-format ASCII format cpio header from
@@ -1256,6 +1294,7 @@ read_in_new_ascii (struct cpio_file_stat *file_hdr, int in_des)
 
   file_hdr->c_ino = FROM_HEX (ascii_header.c_ino);
   file_hdr->c_mode = FROM_HEX (ascii_header.c_mode);
+
   file_hdr->c_uid = FROM_HEX (ascii_header.c_uid);
   file_hdr->c_gid = FROM_HEX (ascii_header.c_gid);
   file_hdr->c_nlink = FROM_HEX (ascii_header.c_nlink);
@@ -1268,10 +1307,20 @@ read_in_new_ascii (struct cpio_file_stat *file_hdr, int in_des)
   file_hdr->c_chksum = FROM_HEX (ascii_header.c_chksum);
   read_name_from_file (file_hdr, in_des, FROM_HEX (ascii_header.c_namesize));
 
+#ifdef __MVS__
+/* --- TRAILER!!! check --- */
+  if (strcmp(file_hdr->c_name, "TRAILER!!!") == 0) {
+		  return;                  // stop processing further
+  }
   /* In SVR4 ASCII format, the amount of space allocated for the header
      is rounded up to the next long-word, so we might need to drop
      1-3 bytes.  */
+  if (strcmp(file_hdr->c_name, "TRAILER!!!") != 0) {
+	      tape_skip_padding(in_des, file_hdr->c_namesize + 110);
+  }
+#else
   tape_skip_padding (in_des, file_hdr->c_namesize + 110);
+#endif
 }
 
 /* Fill in FILE_HDR by reading a binary format cpio header from
@@ -1306,7 +1355,22 @@ read_in_binary (struct cpio_file_stat *file_hdr,
   file_hdr->c_dev_maj = major (short_hdr->c_dev);
   file_hdr->c_dev_min = minor (short_hdr->c_dev);
   file_hdr->c_ino = short_hdr->c_ino;
+#ifdef __MVS__
+  unsigned int raw_mode = short_hdr->c_mode;
+
+  /* Separate type bits and permission bits */
+  unsigned int file_type = raw_mode & S_IFMT;   // file type
+  unsigned int perms     = raw_mode & 07777;   // permissions
+						//
+  // If type bits are missing, assume regular file
+  if (file_type == 0)
+     file_type = S_IFREG;
+
+  file_hdr->c_mode = file_type | perms;
+#else
   file_hdr->c_mode = short_hdr->c_mode;
+#endif
+  
   file_hdr->c_uid = short_hdr->c_uid;
   file_hdr->c_gid = short_hdr->c_gid;
   file_hdr->c_nlink = short_hdr->c_nlink;
@@ -1453,9 +1517,14 @@ process_copy_in (void)
 
       /* Start processing the next file by reading the header.  */
       read_in_header (&file_hdr, in_file_des);
-
+#ifdef __MVS__
+      if (strcmp(file_hdr.c_name, "TRAILER!!!") == 0) 
+      {
+         break;
+      }
+#endif
 #ifdef DEBUG_CPIO
-      if (debug_flag)
+     if (debug_flag)
 	{
 	  struct cpio_file_stat *h;
 	  h = &file_hdr;
@@ -1577,7 +1646,6 @@ process_copy_in (void)
 		  continue;
 		}
 	    }
-
 	  copyin_file(&file_hdr, in_file_des);
 
 	  if (verbose_flag)
